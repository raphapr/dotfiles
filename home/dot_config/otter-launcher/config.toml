
#   ██████╗ ████████╗████████╗███████╗██████╗
#  ██╔═══██╗╚══██╔══╝╚══██╔══╝██╔════╝██╔══██╗
#  ██║   ██║   ██║      ██║   █████╗  ██████╔╝█████╗
#  ██║   ██║   ██║      ██║   ██╔══╝  ██╔══██╗╚════╝
#  ╚██████╔╝   ██║      ██║   ███████╗██║  ██║
#   ╚═════╝    ╚═╝      ╚═╝   ╚══════╝╚═╝  ╚═╝
#  ██╗      █████╗ ██╗   ██╗███╗   ██╗ ██████╗██╗  ██╗███████╗██████╗
#  ██║     ██╔══██╗██║   ██║████╗  ██║██╔════╝██║  ██║██╔════╝██╔══██╗
#  ██║     ███████║██║   ██║██╔██╗ ██║██║     ███████║█████╗  ██████╔╝
#  ██║     ██╔══██║██║   ██║██║╚██╗██║██║     ██╔══██║██╔══╝  ██╔══██╗
#  ███████╗██║  ██║╚██████╔╝██║ ╚████║╚██████╗██║  ██║███████╗██║  ██║
#  ╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝

# Terminal shell script launcher, written in rust
# Source Code: https://github.com/kuokuo123/otter-launcher

[general]
default_module = "pp" # module to run when no prefix is matched
exec_cmd = "sh -c" # exec command of your shell
vi_mode = true # set true to use vi keybinds, false emacs keybinds
esc_to_abort = false # useful for vi users
cheatsheet_entry = "?" # when prompted, will show a list of configured modules
cheatsheet_viewer = "less -R; clear" # command to show cheatsheet; through piping stdout
clear_screen_after_execution = true
loop_mode = true # don't quit after executing a module, useful with scratchpads
external_editor = "nvim" # if set, press ctrl+e (or v in vi normal mode) to edit prompt in specified program
callback = "i3-msg '[class=\"scratchpad-launcher\"] scratchpad show' >> /dev/null" # if set, will run after module execution; for example, calling swaymsg to adjust window size

# ANSI color codes are allowed. However, \x1b should be replaced with \u001B, because the rust toml crate cannot read \x as an escaped character
[interface]
header_cmd = "fastfetch --structure break:colors:break:os:wm:shell:kernel:term:uptime:datetime:battery:break --key-type icon --logo-type data --logo \"$(krabby name bulbasaur --no-title)\""
header = "  \u001B[7;1m launcher \u001B[0m "
header_cmd_trimmed_lines = 1
list_prefix = "    \u001B[36m-\u001B[0m "
selection_prefix = "    \u001B[31;1m> "
place_holder = ""
suggestion_mode = "list"
suggestion_lines = 5
indicator_with_arg_module = "\u001B[31m^\u001B[0m "
indicator_no_arg_module = "\u001B[31m$\u001B[0m "
prefix_padding = 3
prefix_color = "\u001B[33m"
description_color = "\u001B[39m"
place_holder_color = "\u001B[90m"
hint_color = "\u001B[90m"

# modules are defined as followed
# otter-launcher runs cmd as a child process. Use "setsid -f" to unbind or fork the launched command, like normal shell scripting. While unbinding is useful for running gui programs, otter-launcher should retain the ability to run text-based programs.
[[modules]]
description = "search with duckduckgo"
prefix = "dd"
cmd = "xdg-open https://www.duckduckgo.com/?q='{}'" # try wm's exec command for unbinding if 'setsid -f' does not work as expected, eg. 'hyprctl dispatch exec'
with_argument = true # if true, {} in cmd will be replaced with user input. if not explicitly set, taken as false.
url_encode = true # should be true when calling webpages; this ensures special characters in url being readable to browsers; taken as false if not explicitly set
unbind_proc = true # run cmd in a forked shell as opposed to as a child process; useful for launching gui programs; taken as false if not explicitly set

[[modules]]
description = "power menu (fzf)"
prefix = "po"
cmd = """
function power {
if [[ -n $1 ]]; then
case $1 in
"logout") session=`loginctl session-status | head -n 1 | awk '{print $1}'`; loginctl terminate-session $session ;;
"suspend") systemctl suspend ;;
"hibernate") systemctl hibernate ;;
"reboot") systemctl reboot ;;
"shutdown") systemctl poweroff ;;
esac fi }
power $(echo -e 'reboot\nshutdown\nlogout\nsuspend\nhibernate' | fzf --reverse --no-scrollbar --padding 1,3 --prompt 'Power Menu: ' | tail -1)
"""

[[modules]]
description = "run commands"
prefix = "sh"
cmd = "kitty --hold -e bash -c '{}'"
with_argument = true
url_encode = false

[[modules]]
description = "search archwiki"
prefix = "aw"
cmd = "xdg-open https://wiki.archlinux.org/index.php?search='{}'"
with_argument = true
url_encode = true
unbind_proc = true

[[modules]]
description = "search packages"
prefix = "pac"
cmd = "xdg-open https://archlinux.org/packages/?q='{}'"
with_argument = true
url_encode = true
unbind_proc = true

[[modules]]
description = "search the AUR"
prefix = "aur"
cmd = "xdg-open https://aur.archlinux.org/packages?K='{}'"
with_argument = true
url_encode = true
unbind_proc = true

[[modules]]
description = "cambridge dict"
prefix = "dc"
cmd = "xdg-open 'https://dictionary.cambridge.org/dictionary/english/{}'"
with_argument = true
url_encode = true
unbind_proc = true

# fd is needed to run below functions
[[modules]]
description = "open files (fzf)"
prefix = "fo"
cmd = "fd --type f | fzf --with-nth -1 --reverse --padding 1,3 --prompt 'Open Files: ' | setsid -f xargs -r -I [] xdg-open '[]'"

[[modules]]
description = "open folders (yazi)"
prefix = "yz"
cmd = """
fd --type d | fzf --with-nth -1 --reverse --padding 1,3 --prompt 'Open Folders: ' | xargs -r -I [] setsid -f kitty -e yazi '[]'
"""

[[modules]]
description = "search youtube"
prefix = "\u001B[32myt\u001B[0m"
cmd = "xdg-open https://www.youtube.com/results?search_query='{}'"
with_argument = true
url_encode = true

[[modules]]
description = "search github code"
prefix = "\u001B[32mgh\u001B[0m"
cmd = "xdg-open 'https://github.com/search?type=code&q={}'"
with_argument = true
url_encode = true

[[modules]]
description = "search google map"
prefix = "gm"
cmd = "setsid -f xdg-open 'https://www.google.com/maps/search/{}'"
with_argument = true
url_encode = true

[[modules]]
description = "search apps with fsel"
prefix = "ss"
cmd = "fsel -vv -r -ss {}"
with_argument = true

[[modules]]
description = "launch apps instantly"
prefix = "pp"
cmd = "fsel -vv -r -p {}"
with_argument = true
