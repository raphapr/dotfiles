#!/bin/bash

# This file contains step-by-step installation and configuration instructions for setting up Arch/Manjaro Linux on a new machine.

declare -x EDITOR=vim
declare -r USER=raphael
declare -r HOME=/home/$USER
declare -r PKGLIST=$HOME/.pkglist
declare -r PKG_OFFICIAL=$PKGLIST/official
declare -r PKG_AUR=$PKGLIST/aur

# pacman update and dependencies
sudo pacman -Syu --needed

if ! sudo pacman -Q pacaur > /dev/null; then
  echo "[ERROR] pacaur not installed! Install it manually."
  exit 1
fi

sudo pacman -S --noconfirm --needed \
  vim python python-pip fish make cmake gcc fakeroot patch \
  dnsutils nodejs npm ruby ruby-rdoc ruby-docs wget unzip cronie git gopls

# ensure dirs are created before symlinks
mkdir ~/.config/copyq
mkdir ~/.asdf
mkdir ~/.ptpython

# sync sensitive - not versioned - dotfiles
ln -sf ~/Dropbox ~/Cloud
ln -sf ~/Cloud/sync/local_share_fish ~/.local/share/fish
ln -sf ~/Cloud/sync/ptpython_history ~/.ptpython/history
ln -sf ~/Cloud/sync/envsen ~/.envsen
ln -sf ~/Cloud/sync/ssh_config ~/.ssh/config
ln -sf ~/Cloud/sync/krew ~/.krew
ln -sf ~/Cloud/sync/copyq.conf ~/.config/copyq/copyq.conf
ln -sf ~/Cloud/sync/asdf-plugins ~/.asdf/plugins

# aftersleep script
sudo cp ${HOME}/Cloud/sync/aftersleep.sh /usr/lib/systemd/system-sleep/aftersleep
sudo chown root: /usr/lib/systemd/system-sleep/aftersleep

# geoclue
cp ~/Cloud/sync/geoclue.conf /etc/geoclue/geoclue.conf

# gopls systemd service
cp ~/Cloud/sync/systemd-user/gopls.service ~/.config/systemd/user/
systemctl --user daemon-reload
systemctl enable --user gopls.service
systemctl start --user gopls.service

# pip / python packages
sudo pip install neovim virtualfish flake8 saws ptpython ipython boto3 yamllint pillow-simd

# npm prefix configuration
mkdir "${HOME}/.npm-packages"
npm config set prefix "${HOME}/.npm-packages"

# npm packages
npm install -g git-recent jsonlint

# homesick
export PATH="$PATH:$(ruby -e 'print Gem.user_dir')/bin"
gem install homesick

# packer.nvim
if [ ! -d  ~/.local/share/nvim/site/pack/packer/start/packer.nvim ]; then
  echo "install packer.nvim"
  git clone --depth 1 https://github.com/wbthomason/packer.nvim ~/.local/share/nvim/site/pack/packer/start/packer.nvim
else
  echo "packer.nvim already installed!"
fi

git clone --depth 1 https://github.com/wbthomason/packer.nvim ~/.local/share/nvim/site/pack/packer/start/packer.nvim

# git completion for bash
if [ ! -f ~/.git-completion.bash ]; then
  echo "install git-completion.bash"
  wget https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -O ~/.git-completion.bash
else
  echo "git-completion.bash already installed!"
fi

if ! grep -q "[pritunl]" /etc/pacman.conf; then
  sudo tee -a /etc/pacman.conf << EOF
[pritunl]
Server = https://repo.pritunl.com/stable/pacman
EOF
  sudo pacman-key --keyserver hkp://keyserver.ubuntu.com -r 7568D9BB55FF9E5287D586017AE645C0CF8E292A
  sudo pacman-key --lsign-key 7568D9BB55FF9E5287D586017AE645C0CF8E292A
  sudo pacman -Sy
  sudo pacman -S pritunl-client-electron
fi


# kubectl completion for fish shell
mkdir -p ~/.config/fish/completions
pushd ~/.config/fish || exit
git clone https://github.com/evanlucas/fish-kubectl-completions
ln -sf ../fish-kubectl-completions/completions/kubectl.fish completions/
popd || exit

# fzf
if [ ! -d ~/.fzf ]; then
  echo "Install fzf"
  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  ~/.fzf/install
else
  echo "fzf already installed!"
fi

# powerline-fonts
if [ ! -d ~/.fonts ]; then
  echo "Install powerline-fonts"
  git clone https://github.com/powerline/fonts.git /tmp/fonts
  sh /tmp/fonts/install.sh
  ln -s ~/.local/share/fonts ~/.fonts
else
  echo "powerline-fonts already installed!"
fi

# symlink tmux conf
ln -sf ~/.tmux.conf ~/.tmux/tmux.conf

# tmux plugin manager
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

# tmux-xpanes
wget https://raw.githubusercontent.com/greymd/tmux-xpanes/master/bin/xpanes -O /tmp/xpanes
sudo install -m 0755 /tmp/xpanes /usr/local/bin/xpanes
rm -rf ~/tmp/xpanes

echo "Install official packages"
for pkg in $(cat $OFFICIAL_FILE); do
  sudo pacman -S --needed --noconfirm "${pkg}" || echo "${pkg} failed." >> "${PKGLOG}"
done

echo "Install AUR packages"
for pkg in $(cat $AUR_FILE); do
  pacaur -S --needed --noedit --noconfirm "${pkg}" || echo "${pkg} failed." >> "${PKGLOG}"
done

pushd ${HOME} || exit
asdf install
popd || exit
