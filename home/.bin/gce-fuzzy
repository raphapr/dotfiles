#!/bin/bash

usage() {
  echo "Usage: $0 [ -p PROJECT ] [ -s SSH OPTS ] [ -c CACHE TTL ] [ -r REFRESH CACHE ]" 1>&2
  exit 2
}

exit_abnormal() {
  usage
  exit 1
}

while getopts ':p:s:h:c:rh' option
do
  case ${option} in
    p) project=$OPTARG ;;
    s) ssh_opts=$OPTARG ;;
    c) cache_ttl=$OPTARG ;;
    r) refresh=true ;;
    h) usage ;;
    *) exit_abnormal ;;
  esac
done

# default values
[[ -z ${cache_ttl} ]] && cache_ttl=3600
cache_dir="${HOME}/.gce_fuzzy_cache"
cache_file="${HOME}/.gce_fuzzy_cache/$project"

mkdir -p $cache_dir

if [ -z ${project} ]; then
  echo "gce-fuzzy requires project argument!"
  exit_abnormal
fi

if [ ! -f $(which fzf) ]; then
  echo "fzf not installed!"
  exit 1
fi

if [ ! -f $(which gcloud) ]; then
  echo "gcloud sdk  not installed!"
  exit 1
fi

refresh_cache() {
  echo "Refreshing cache..."
  gcloud compute instances list --project=$project --filter="status=RUNNING" --format='table(name,zone,networkInterfaces[0].networkIP :label=Internal_IP,networkInterfaces[0].accessConfigs[0].natIP :label=External_IP)' | tail -n +2 > ${cache_file}
  get_cache
}

get_cache() {
  result=$(cat ${cache_file} | fzf | awk '{ print $4 }')
}


echo "Listing GCE instances..."
if [ -f ${cache_file} ] && [ $(expr $(date +%s) - $(date -r "$cache_file" +%s)) -lt $cache_ttl ] && [ "$refresh" != true ]; then
    echo "Getting cache..."
    get_cache
else
    refresh_cache
fi

if [ -z ${result} ]; then
  exit 1
fi

echo ssh $result
ssh $ssh_opts $result
